buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // Make sure this version matches the one included in Kotlin for Forge
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10'
        // OPTIONAL Gradle plugin for Kotlin Serialization
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.6.10'
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

plugins {
    id "org.sonarqube" version "3.4.0.2513"
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'

apply from: 'https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.1.0.gradle'

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "${project.mod_id}.refmap.json"
}

version = project.mod_version
group = 'com.possible_triangle'
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    // Change to your preferred mappings
    mappings channel: project.mappings_channel, version: project.mc_version
    // Add your AccessTransformer
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            arg '-mixin.config=create.mixins.json'
            arg '-mixin.config=flywheel.mixins.json'
            arg "-mixin.config=${project.mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                bigsip {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'

            arg '-mixin.config=create.mixins.json'
            arg '-mixin.config=flywheel.mixins.json'
            arg "-mixin.config=${project.mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                bigsip {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            arg '-mixin.config=create.mixins.json'
            arg '-mixin.config=flywheel.mixins.json'
            arg "-mixin.config=${project.mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                bigsip {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // Use the latest version of Minecraft Forge
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}")

    implementation fg.deobf("curse.maven:create-328085:${project.create_version}")
    implementation fg.deobf("curse.maven:flywheel-486392:${project.flywheel_version}")

    implementation fg.deobf("curse.maven:tough-as-nails-246391:${project.tan_version}")

    runtimeOnly fg.deobf("curse.maven:jeed-532286:${project.jeed_version}")

    //implementation fg.deobf("com.teamcofh:cofh_core:${project.mc_version}-${project.cofh_core_version}")
    //implementation fg.deobf("com.teamcofh:thermal_foundation:${project.mc_version}-${project.thermal_foundation_version}")
    //implementation fg.deobf("com.teamcofh:thermal_expansion:${project.mc_version}-${project.thermal_expansion_version}")

    runtimeOnly fg.deobf("curse.maven:cofh-core-69162:${project.cofh_core_version}")
    runtimeOnly fg.deobf("curse.maven:thermal-foundation-222880:${project.thermal_foundation_version}")
    runtimeOnly fg.deobf("curse.maven:thermal-expansion-69163:${project.thermal_expansion_version}")
    runtimeOnly fg.deobf("curse.maven:thermal-cultivation-271835:${project.thermal_cultivation_version}")

    implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${project.top_version}") {
        transitive false
    }

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : project.mod_id,
                'Specification-Vendor'    : "examplemodsareus",
                'Specification-Version'   : "1",
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.mod_version,
                'Implementation-Vendor'   : "examplemodsareus",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${project.mod_id}.mixins.json",
        ])
    }
}

def ENV = System.getenv()

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pssbletrngle/${project.mod_id}")
            version = version
            credentials {
                username = ENV.GITHUB_ACTOR
                password = ENV.GITHUB_TOKEN
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = group
            artifactId = project.mod_id
            version = project.mod_version
            from(components.java)
        }
    }
}

if (ENV.CURSEFORGE_TOKEN) curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = project.curseforge_project_id
        addGameVersion project.mc_version
        addGameVersion 'Forge'
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'
        releaseType = project.release_type
        mainArtifact(jar) {
            displayName = "Version ${project.mod_version}"
        }
        requiredDependency 'create'
        requiredDependency 'kotlin-for-forge'
        optionalDependency 'thermal-cultivation'
    }
}

if (ENV.MODRINTH_TOKEN) modrinth {
    token = ENV.MODRINTH_TOKEN
    projectId = project.modrinth_project_id
    versionNumber = version
    versionName = "Version ${project.mod_version}"
    changelog = ENV.CHANGELOG
    gameVersions = [project.mc_version]
    loaders = ["forge"]
    versionType = project.release_type
    uploadFile = jar
    syncBodyFrom = project.file("README.md").text
    dependencies {
        required.project "ordsPcFz"
        required.project "LNytGWDc"
        optional.project "5beJoehw"
    }
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

sonarqube {
    properties {
        property 'sonar.projectVersion', mod_version
        property "sonar.projectKey", project.mod_id
    }
}
